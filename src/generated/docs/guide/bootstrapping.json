{
  "id": "guide/bootstrapping",
  "title": "Bootstrapping",
  "contents": "\n<div class=\"content\">\n<h1 id=\"bootstrapping\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#bootstrapping\"><i class=\"material-icons\">link</i></a>Bootstrapping</h1>\n<p>An Angular Module (NgModule) class describes how the application parts fit together.\nEvery application has at least one Angular Module, the <em>root</em> module\nthat you <a href=\"guide/bootstrapping#main\">bootstrap</a> to launch the application.\nYou can call the class anything you want. The conventional name is <code>AppModule</code>.</p>\n<p>The <a href=\"https://cli.angular.io/\"><strong>Angular CLI</strong></a> produces a new project with the following minimal <code>AppModule</code>.\nYou evolve this module as your application grows.</p>\n<code-example path=\"cli-quickstart/src/app/app.module.ts\" title=\"src/app/app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p>After the <code>import</code> statements, you come to a class adorned with the\n<strong><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></strong> <a href=\"guide/glossary#decorator\" title=\"&#x22;Decorator&#x22; explained\"><em>decorator</em></a>.</p>\n<p>The <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator identifies <code>AppModule</code> as an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class.\n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> takes a <em>metadata</em> object that tells Angular how to compile and launch the application.</p>\n<p>The <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> properties for the minimal <code>AppModule</code> generated by the CLI are as follows:</p>\n<ul>\n<li><strong><a href=\"guide/bootstrapping#declarations\"><em>declarations</em></a></strong> — declares the application components. At the moment, there is only the <code>AppComponent</code>.</li>\n</ul>\n<ul>\n<li><strong><a href=\"guide/bootstrapping#imports\"><em>imports</em></a></strong> — the <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>, which this and every application must import in order to run the app in a browser.</li>\n</ul>\n<ul>\n<li><strong><a href=\"guide/bootstrapping#providers\"><em>providers</em></a></strong> — there are none to start but you are likely to add some soon.</li>\n</ul>\n<ul>\n<li><strong><a href=\"guide/bootstrapping#bootstrap-array\"><em>bootstrap</em></a></strong> — the <em>root</em> <code>AppComponent</code> that Angular creates and inserts into the <code>index.html</code> host web page.</li>\n</ul>\n<p>The <a href=\"guide/ngmodule\">Angular Modules (NgModules)</a> guide dives deeply into the details of <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.\nAll you need to know at the moment is a few basics about these four properties.</p>\n<a id=\"declarations\"></a>\n<h3 id=\"the-declarations-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-declarations-array\"><i class=\"material-icons\">link</i></a>The <em>declarations</em> array</h3>\n<p>You tell Angular which components belong to the <code>AppModule</code> by listing it in the module's <code>declarations</code> array.\nAs you create more components, you'll add them to <code>declarations</code>.</p>\n<p>You must declare <em>every</em> component in an Angular Module class.\nIf you use a component without declaring it, you'll see a clear error message in the browser console.</p>\n<p>You'll learn to create two other kinds of classes —\n<a href=\"guide/attribute-directives\">directives</a> and <a href=\"guide/pipes\">pipes</a> —\nthat you must also add to the <code>declarations</code> array.</p>\n<div class=\"alert is-important\">\n<p><strong>Only <em>declarables</em></strong> — <em>components</em>, <em>directives</em> and <em>pipes</em> — belong in the <code>declarations</code> array.\nDo not put any other kind of class in <code>declarations</code>. Do <em>not</em> declare <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> classes. Do <em>not</em> declare service classes. Do <em>not</em> declare model classes.</p>\n</div>\n<a id=\"imports\"></a>\n<h3 id=\"the-imports-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-imports-array\"><i class=\"material-icons\">link</i></a>The <em>imports</em> array</h3>\n<p>Angular Modules are a way to consolidate features that belong together into discrete units.\nMany features of Angular itself are organized as Angular Modules.\nHTTP services are in the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>. The router is in the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.\nEventually you may create your own modules.</p>\n<p>Add a module to the <code>imports</code> array when the application requires its features.</p>\n<p><em>This</em> application, like most applications, executes in a browser.\nEvery application that executes in a browser needs the <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> from <code>@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>.\nSo every such application includes the <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> in its <em>root</em> <code>AppModule</code>'s <code>imports</code> array.\nOther guide pages will tell you when you need to add additional modules to this array.</p>\n<div class=\"alert is-important\">\n<p><strong>Only <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> classes</strong> go in the <code>imports</code> array. Do not put any other kind of class in <code>imports</code>.</p>\n</div>\n<div class=\"l-sub-section\">\n<p>The <code>import</code> statements at the top of the file and the NgModule's <code>imports</code> array\nare unrelated and have completely different jobs.</p>\n<p>The <em>JavaScript</em> <code>import</code> statements give you access to symbols <em>exported</em> by other files\nso you can reference them within <em>this</em> file.\nYou add <code>import</code> statements to almost every application file.\nThey have nothing to do with Angular and Angular knows nothing about them.</p>\n<p>The <em>module's</em> <code>imports</code> array appears <em>exclusively</em> in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata object.\nIt tells Angular about specific <em>other</em> Angular Modules—all of them classes decorated\nwith <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>—that the application needs to function properly.</p>\n</div>\n<a id=\"providers\"></a>\n<h3 id=\"the-providers-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-providers-array\"><i class=\"material-icons\">link</i></a>The <em>providers</em> array</h3>\n<p>Angular apps rely on <a href=\"guide/dependency-injection\"><em>dependency injection (DI)</em></a>\nto deliver services to various parts of the application.</p>\n<p>Before DI can inject a service, it must create that service with the help of a <em>provider</em>.\nYou can tell DI about a service's <em>provider</em> in a number of ways.\nAmong the most popular ways is to register the service in the root <code>ngModule.providers</code> array, which will make that service available <em>everywhere</em>. </p>\n<p>For example, a data service provided in the <code>AppModule</code>s <em>providers</em> can be injected into any\ncomponent anywhere in the application.</p>\n<p>You don't have any services to provide yet.\nBut you will create some before long and you may chose to provide many of them here.</p>\n<a id=\"bootstrap-array\"></a>\n<h3 id=\"the-bootstrap-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-bootstrap-array\"><i class=\"material-icons\">link</i></a>The <em>bootstrap</em> array</h3>\n<p>You launch the application by <a href=\"guide/bootstrapping#main\"><em>bootstrapping</em></a> the root <code>AppModule</code>.\nAmong other things, the <em>bootstrapping</em> process creates the component(s) listed in the <code>bootstrap</code> array\nand inserts each one into the browser DOM.</p>\n<p>Each bootstrapped component is the base of its own tree of components.\nInserting a bootstrapped component usually triggers a cascade of component creations that fill out that tree.</p>\n<p>While you can put more than one component tree on a host web page, that's not typical.\nMost applications have only one component tree and they bootstrap a single <em>root</em> component.</p>\n<p>You can call the one <em>root</em> component anything you want but most developers call it <code>AppComponent</code>.</p>\n<p>Which brings us to the <em>bootstrapping</em> process itself.</p>\n<a id=\"main\"></a>\n<h2 id=\"bootstrap-in-maints\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#bootstrap-in-maints\"><i class=\"material-icons\">link</i></a>Bootstrap in <em>main.ts</em></h2>\n<p>While there are many ways to bootstrap an application, most applications do so in the <code>src/main.ts</code> that is generated by the Angular CLI.</p>\n<code-example path=\"cli-quickstart/src/main.ts\" title=\"src/main.ts\" linenums=\"false\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-example>\n<p>This code creates a browser platform for dynamic compilation and\nbootstraps the <code>AppModule</code> described above.</p>\n<p>The <em>bootstrapping</em> process sets up the execution environment,\ndigs the <em>root</em> <code>AppComponent</code> out of the module's <code>bootstrap</code> array,\ncreates an instance of the component and inserts it within the element tag identified by the component's <code>selector</code>.</p>\n<p>The <code>AppComponent</code> selector — here and in most documentation samples — is <code>app-root</code>\nso Angular looks for a <code>&#x3C;app-root></code> tag in the <code>index.html</code> like this one ...</p>\n<code-example title=\"src/index.html (body)\" linenums=\"false\">\n\n  &#x3C;body>\n    &#x3C;app-root>&#x3C;/app-root>\n  &#x3C;/body>\n\n</code-example>\n<p>... and displays the <code>AppComponent</code> there.</p>\n<p>The <code>main.ts</code> file is very stable. Once you've set it up, you may never change it again.</p>\n<h2 id=\"more-about-angular-modules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#more-about-angular-modules\"><i class=\"material-icons\">link</i></a>More about Angular Modules</h2>\n<p>Your initial app has only a single module, the <em>root</em> module.\nAs your app grows, you'll consider subdividing it into multiple \"feature\" modules,\nsome of which can be loaded later (\"lazy loaded\") if and when the user chooses\nto visit those features.</p>\n<p>When you're ready to explore these possibilities, visit the <a href=\"guide/ngmodule\">Angular Modules</a> guide.</p>\n\n</div>\n<!-- links to this doc:\n - guide/architecture\n - guide/ngmodule\n - guide/quickstart\n - guide/setup\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/common/http/HttpClientModule\n - api/core/NgModule\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterModule\n - guide/attribute-directives\n - guide/bootstrapping#bootstrap-array\n - guide/bootstrapping#bootstrap-in-maints\n - guide/bootstrapping#bootstrapping\n - guide/bootstrapping#declarations\n - guide/bootstrapping#imports\n - guide/bootstrapping#main\n - guide/bootstrapping#more-about-angular-modules\n - guide/bootstrapping#providers\n - guide/bootstrapping#the-bootstrap-array\n - guide/bootstrapping#the-declarations-array\n - guide/bootstrapping#the-imports-array\n - guide/bootstrapping#the-providers-array\n - guide/dependency-injection\n - guide/glossary#decorator\n - guide/ngmodule\n - guide/pipes\n - https://cli.angular.io/\n-->"
}